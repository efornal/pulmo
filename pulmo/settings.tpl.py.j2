# -*- coding: utf-8 -*-
from __future__ import unicode_literals
"""
Django settings for pulmo project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""
from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import ldap

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_URL = "{{ app_base_url }}{{ app_url }}"
APPLICATION_NAME = "{{ app_title|capitalize }}"
APPLICATION_DESC = "{{ app_desc|capitalize }}"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@(p@8_b$kl37vsh_p8urf@^681q&qpz+b+f3-o(aj4cjnv*_81'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = {{ app_debug }}

ALLOWED_HOSTS = ['*']

ADMINS = (
    ("{{ app_admin_name }}", "{{ app_admin_email }}"),
)

MANAGERS = (
    ("{{ app_manager_name }}", "{{ app_manager_email }}"),
)

# Application definition

INSTALLED_APPS = (
    'suit',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'jquery',
    'jquery_ui',
    'bootstrap_ui',
    'django_extensions',
    'bootstrap_themes',
    'app',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'app.middleware.ForceLangMiddleware',
)

ROOT_URLCONF = 'pulmo.urls'

import os
SETTINGS_PATH = os.path.dirname(os.path.dirname(__file__))


STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(SETTINGS_PATH, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': {{ app_debug }},
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pulmo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ db_name }}',
        'USER': '{{ db_user }}',
        'PASSWORD': '{{ db_pass }}',
        'PORT': '{{ db_port }}',
        'HOST': '{{ db_host }}',
    },
    '{{ db_user_owner }}': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ db_name }}',
        'USER': '{{ db_user_owner }}',
        'PASSWORD': '{{ db_pass_owner }}',
        'PORT': '{{ db_port }}',
        'HOST': '{{ db_host }}',
    },
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'es'

LANGUAGES = (
  ('es', _('Spanish')),
  ('en', _('English')),
)

TIME_ZONE = 'America/Argentina/Buenos_Aires'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL="{{ app_static_url }}"

{% if app_static_root %}
STATIC_ROOT = "{{ app_static_root }}"
{% endif %}

LOGIN_URL="{{ app_login_url }}"
LOGIN_REDIRECT_URL = "{{ app_login_redirect_url }}"

PROJECT_PATH = os.path.abspath(os.path.dirname(__file__))

LOCALE_PATHS = (
    os.path.join('/srv/mollys/shared/app/locale'),
    os.path.join(BASE_DIR, 'locale'),
)

LOGS_VISUALIZATION_CHOICES = (
    ('1', 'Log-Analizer'),
    ('2', 'Archivo en Log-Server'),
)

# =================================\
# ganeti configuration
GANETI_INSTANCES_URL = '{{ ganeti_instances_url }}'
# =================================/


# =================================\
# redmine configuration
#
# Si REDMINE_ENABLE_TICKET_CREATION está habilitado:
# Para formulario de aplicación
#  - crea ticket principal con solicitud de aplicación -servidor de test-
#  - crea subtarea con solicitud de usuarios ssh (+ssh_users)
#  - crea subtarea con usuarios extras de base de datos (+extra_database_users)
#  - crea subtarea para monitoreo en test
#  - crea subtarea configuración de nivel de logs en test
#  - crea subtarea para solicitud de máquina virtual de integración (+requires_integration)
# Para formulario de producción
#  - crea ticket principal con solicitud de aplicación -servidor de producción-
#  - crea subtarea para monitoreo en producción
#  - crea subtarea configuración de nivel de logs en producción
#  - crea subtarea configuración de backup en producción
#
#    + indica se debió especificar el dato en formulario para que se realice el ticket.
REDMINE_ENABLE_TICKET_CREATION = {{ redmine_enable_ticket_creation }}
#
REDMINE_URL="{{ redmine_url }}"
REDMINE_USERNAME="{{ redmine_username }}"
REDMINE_PASSWORD = "{{redmine_password }}"
REDMINE_PROJECT = "{{ redmine_project }}"
REDMINE_TRACKER_ID = {{ redmine_tracker_id }}
REDMINE_STATUS_ID = {{ redmine_status_id }}
REDMINE_PRIORITY_ID = {{ redmine_priority_id }}
REDMINE_ASSIGNED_TO_ID = {{ redmine_assigned_to_id }}
# maximum limit users found as observers of a ticket.
# If there are more than this value, the addition of the ticket is omitted obervadores
REDMINE_MAXIMUM_OBSERVER_FOUND = {{ redmine_maximum_observer_found }}
#
#
# Url where the procedure to resolve the ticket will be explained
REDMINE_SSH_USERS_URL   = "{{ redmine_ssh_users_url }}"
REDMINE_MONITORING_URL  = "{{ redmine_monitoring_url }}"
REDMINE_LOG_LEVEL_URL   = "{{ redmine_log_level_url }}"
REDMINE_INTEGRATION_URL = "{{ redmine_integration_url }}"
REDMINE_BACKUP_URL      = "{{ redmine_backup_url }}" 
#
# =================================/


# =================================\
# zabbix configuration
ZABBIX_API_URL = "{{ zabbix_api_url }}"
ZABBIX_API_USERNAME = "{{ zabbix_api_username }}"
ZABBIX_API_PASSWORD = "{{ zabbix_api_password }}"
ZABBIX_API_MONITORING_TEMPLATE_ID = {{ zabbix_api_monitoring_template_id }}
ZABBIX_API_PGSQL_TEMPLATE_ID = {{ zabbix_api_pgsql_template_id }}
ZABBIX_API_MYSQL_TEMPLATE_ID = {{ zabbix_api_mysql_template_id }}

# when's defined, look for the host with, and without, the suffix (ex.: .com)
ZABBIX_API_HOST_SUFIX = "{{ zabbix_api_host_sufix }}"

# =================================/


# =================================\
# ldap configuration

LDAP_SERVER = "{{ ldap_server }}"
LDAP_DN = "{{ ldap_dn }}"

# Organizational Unit for Person
LDAP_PEOPLE = "{{ ldap_people }}"
LDAP_GROUP  = "{{ ldap_group }}"
# =================================/

# django configuration
SUIT_CONFIG = {
    'ADMIN_NAME': APPLICATION_NAME
}

# =================================\
# django ldap configuration
#
#
# Ldap Group Type
from django_auth_ldap.config import LDAPSearch, PosixGroupType
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("ou={},{}".format(LDAP_GROUP,LDAP_DN),
                                    ldap.SCOPE_SUBTREE, "(objectClass=posixGroup)"
)
AUTH_LDAP_GROUP_TYPE =  PosixGroupType()
#
#
# User will be updated with LDAP every time the user logs in.
# Otherwise, the User will only be populated when it is automatically created.
AUTH_LDAP_ALWAYS_UPDATE_USER = True
#
#
# Simple group restrictions
# AUTH_LDAP_REQUIRE_GROUP = "cn=users,ou={},{}".format(LDAP_GROUP,LDAP_DN)
# AUTH_LDAP_DENY_GROUP = "cn=denygroup,ou={},{}".format(LDAP_GROUP,LDAP_DN)
#
# Defines the django admin attribute
# according to whether the user is a member or not in the specified group
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_active": "cn=users,ou={},{}".format(LDAP_GROUP,LDAP_DN),
    "is_staff": "cn=users,ou={},{}".format(LDAP_GROUP,LDAP_DN),
    "is_superuser": "cn=admin,ou={},{}".format(LDAP_GROUP,LDAP_DN),
}
#
# Ldap User Auth
#AUTH_LDAP_BIND_DN = "cn={},{}".format(LDAP_USERNAME,LDAP_DN)
#AUTH_LDAP_BIND_PASSWORD = LDAP_PASSWORD

AUTH_LDAP_SERVER_URI = LDAP_SERVER

AUTH_LDAP_USER_SEARCH = LDAPSearch("ou={},{}".format(LDAP_PEOPLE,LDAP_DN),
                                   ldap.SCOPE_SUBTREE, "(uid=%(user)s)")
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)

# =================================/


# #loggin querys in develompent
# if DEBUG:
#     import logging
#     l = logging.getLogger('django.db.backends')
#     l.setLevel(logging.DEBUG)
#     l.addHandler(logging.StreamHandler())
#     logging.basicConfig(
#         level = logging.DEBUG,
#         format = " %(levelname)s %(name)s: %(message)s",
#     )

# # Enable debug for ldap server connection
# logger = logging.getLogger('django_auth_ldap')
# logger.addHandler(logging.StreamHandler())
# logger.setLevel(logging.DEBUG)


# import logging
# logger = logging.getLogger('django_auth_ldap')
# logger.addHandler(logging.StreamHandler())
# logger.setLevel(logging.DEBUG)


# import warnings
# warnings.filterwarnings(
#         'error', r"DateTimeField .* received a naive datetime",
#         RuntimeWarning, r'django\.db\.models\.fields')
